class STRUCT_Autocoder():
  def __init__(self, input_file):
    # Open file
    self.f = open(input_file)

    # Function name root
    self.gen_func_name = "TLM_"

    # Parsed variables
    self.name = ""
    self.types = []
    self.args = []
    self.comments = []

    # Reached EOF
    self.EOF = False
    
    # Skip to the proper place in the file
    self.skip_to_begin_tlm()


  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close_file()

  def close_file(self):
    self.f.close

  def skip_to_begin_tlm(self):
    # Skip until begin tlm marker
    #while self.f.readline().strip() != "##### BEGIN TELEMETRY #####": pass
    pass

  def header(self):
    print "/*******************************************************"
    print " *"
    print " * THIS FILE IS AUTO-GENERATED, DO NOT EDIT THIS FILE!"
    print " * To edit this file, edit the auto-coder located"
    print " * in TLM/"
    print " *"
    print " ******************************************************/"
    print

  def namespace_start(self):
    print "namespace AllStar{"
    print "namespace Servers{"
    print

  def namespace_end(self):
    print "}"
    print "}"
    print

  def get_line(self):
    return self.f.readline().strip()

  def reset_struct(self):
    self.name = ""
    self.types = []
    self.args = []
    self.comments = []

  def parse_line(self, line):
    split_line = line.split(" ")
    
    self.types.append( split_line[0] )
    self.args.append( split_line[1] )
    self.comments.append( " ".join(split_line[2:]).strip() )

  def build_constructor_args(self):
    s = ""
    for i in range(len(self.args)):
      s += self.types[i] + " " + self.args[i] + ", "
    s = s[:-2]
    return s

  def get_struct(self):
    self.name = self.get_line()
    line = self.get_line()

    if (self.name == "" and line == ""):
      self.EOF = True

    while (line != ""):
      self.parse_line(line)
      line = self.get_line()

