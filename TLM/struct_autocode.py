import sys
import time
import re



class STRUCT_Autocoder():
  def __init__(self, input_file):
    # Open file
    self.f = open(input_file)

    # Function name root
    self.gen_func_name = "TLM_"

    # Parsed variables
    self.name = ""
    self.types = []
    self.args = []
    self.comments = []

    # Reached EOF
    self.EOF = False
    
    # Skip to the proper place in the file
    self.skip_to_begin_tlm()


  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close_file()

  def close_file(self):
    self.f.close

  def skip_to_begin_tlm(self):
    # Skip until begin tlm marker
    #while self.f.readline().strip() != "##### BEGIN TELEMETRY #####": pass
    pass

  def header(self):
    print "/*******************************************************"
    print " *"
    print " * THIS FILE IS AUTO-GENERATED, DO NOT EDIT THIS FILE!"
    print " * To edit this file, edit the auto-coder located"
    print " * in TLM/"
    print " *"
    print " ******************************************************/"
    print

  def include(self):
    print "#include \"util/serialize.h\""
    print

  def namespace_start(self):
    print "namespace AllStar{"
    print "namespace Servers{"
    print

  def namespace_end(self):
    print "}"
    print "}"
    print

  def get_line(self):
    return self.f.readline().strip()

  def reset_struct(self):
    self.name = ""
    self.types = []
    self.args = []
    self.comments = []

  def parse_line(self, line):
    split_line = line.split(" ")
    
    self.types.append( split_line[0].capitalize() )
    self.args.append( split_line[1] )
    self.comments.append( " ".join(split_line[2:]).strip() )

  def get_struct(self):
    self.name = self.get_line()
    line = self.get_line()

    if (self.name == "" and line == ""):
      self.EOF = True

    while (line != ""):
      self.parse_line(line)
      line = self.get_line()




class CPP_Autocoder(STRUCT_Autocoder):
  def __init__(self, input_file):
    STRUCT_Autocoder.__init__(self, input_file)

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    STRUCT_Autocoder.__exit__(self, exc_type, exc_value, traceback)

  def print_serialize(self):
    print "%s::serialize() {" % (self.name)
    for field in range(len(self.types)):
      split_arg = re.split("\[|\]", self.args[field])
      if ( len(split_arg) > 1 ):
        print "\tfor (int iter = 0; iter < %s; iter++) {" % (split_arg[1])
        print "\t\tthis->serialize%s(this->%s[iter]);" % (self.types[field], split_arg[0])
        print "\t}"
      else:
        print "\tthis->serialize%s(this->%s);" % (self.types[field], self.args[field])
    print "}"
    print

  def print_deserialize(self):
    print "%s::deserialize() {" % (self.name)
    for field in range(len(self.types)):
      split_arg = re.split("\[|\]", self.args[field])
      if ( len(split_arg) > 1 ):
        print "\tfor (int iter = 0; iter < %s; iter++) {" % (split_arg[1])
        print "\t\tthis->%s[iter] = this->deserialize%s();" % (split_arg[0], self.types[field])
        print "\t}"
      else:
        print "\tthis->%s = this->deserialize%s();" % (self.args[field], self.types[field])
    print "}"
    print

  def autocode_serialize(self):
    self.header()
    self.include()
    self.namespace_start()

    while (not self.EOF):
      self.get_struct()

      if (self.EOF):
        break

      self.print_serialize()
      self.print_deserialize()
      self.reset_struct()



class HPP_Autocoder(STRUCT_Autocoder):
  def __init__(self, input_file):
    STRUCT_Autocoder.__init__(self, input_file)

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    STRUCT_Autocoder.__exit__(self, exc_type, exc_value, traceback)

  def print_struct(self):
    print "class %s : public Serialize {" % (self.name)
    print "public:"
    for field in range(len(self.types)):
      print "\t%s %s; %s" % (self.types[field], self.args[field], self.comments[field])
    print "void serialize(void);"
    print "void deserialize(void);"
    print "};"
    print
    
  def autocode(self):
    self.header()
    self.include()
    self.namespace_start()

    while (not self.EOF):
      self.get_struct()

      if (self.EOF):
        break

      self.print_struct()
      self.reset_struct()

    self.namespace_end()






if len(sys.argv) < 2:
  print "ERROR: No argument for filename given"
  quit()

input_file = sys.argv[1]

#with HPP_Autocoder(input_file) as coder:
#  coder.autocode()

with CPP_Autocoder(input_file) as coder:
  coder.autocode_serialize()
