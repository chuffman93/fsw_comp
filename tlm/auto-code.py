import time
import os

input_file = "dict.txt"

type_sizes = {
  "Int8"  : 1,
  "Int16" : 2,
  "Int32" : 4,
  "Int64" : 8,
  "UInt8" : 1,
  "UInt16": 2,
  "UInt32": 4,
  "UInt64": 8,
  "Float" : 4,
  "Double": 8,
  "Bool"  : 1
}


class TLM_AutoCoder():

  def __init__(self, input_file):
    self.f = open(input_file)
    self.name = ""
    self.ID = ""
    self.dest = ""
    self.fmt_str = ""
    self.param_types = ""
    self.buf_size = 0
    self.type_list = []
    self.arg_list = []
    self.list_len = 0
    self.args = ""
    self.skip_to_begin_tlm()


  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    self.close_file()

  def close_file(self):
    self.f.close

  def skip_to_begin_tlm(self):
    # Skip until begin tlm marker
    while self.f.readline().strip() != "##### BEGIN TELEMETRY #####": pass

  def header(self):
    print "/*******************************************************"
    print " *"
    print " * THIS FILE IS AUTO-GENERATED, DO NOT EDIT THIS FILE!"
    print " * To edit this file, edit the auto-coder located"
    print " * in TLM/auto-code.py"
    print " *"
    print " ******************************************************/"
    print

  def parse_data(self):
    self.name = self.f.readline().strip()
    self.ID = self.f.readline().strip()
    self.dest = self.f.readline().strip()
    self.fmt_str = self.f.readline().strip()
    self.param_types = self.f.readline().strip()
    self.f.readline()

  def eof(self):
    return True if not self.param_types else False

  def parse_params(self):
    if self.param_types != "None":
      self.type_list = self.param_types.split(",")
      self.list_len = len(self.type_list);
      for i in range(self.list_len):
        self.arg_list.append("arg" + str(i))

  def get_buf_size(self):
    self.buf_size = 2;
    for t in self.type_list:
      self.buf_size += type_sizes[t]

  def build_args_string(self):
    for i in range(self.list_len):
      self.args += self.type_list[i].lower() + " " + self.arg_list[i] + ", "

    # Remove trailing comma and space
    self.args = self.args[0:-2]



class CPP_AutoCoder(TLM_AutoCoder):
  def __init__(self, input_file):
    TLM_AutoCoder.__init__(self, input_file)

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    TLM_AutoCoder.__exit__(self, exc_type, exc_value, traceback)

  def print_func(self):
    print "void log_tlm_%s(%s) {" % (self.name, self.args)
    print "  uint8_t buf[%s];" % (self.buf_size)
    print "  ser.Serialize ser(buf, %s);" % (self.buf_size)
    print "  ser.serializeUInt16(%s);" % (self.ID)
    for i in range(self.list_len):
        print "  ser.serialize%s(%s);" % (self.type_list[i], self.arg_list[i])
    print "  fmgServer->Log(DESTINATION_%s, buf);" % (self.dest)
    print "}"
    print

  def autocode_single_tlm(self):
      self.parse_params()
      self.get_buf_size()
      self.build_args_string()
      self.print_func()

  def autocode_all_tlm(self):
    while True:
      self.parse_data()
      if self.eof(): break
      self.autocode_single_tlm()

  def autocode(self):
    self.header()
    self.autocode_all_tlm()

    
class HPP_AutoCoder(TLM_AutoCoder):
  def __init__(self, input_file):
    TLM_AutoCoder.__init__(self, input_file)

  def __enter__(self):
    return self

  def __exit__(self, exc_type, exc_value, traceback):
    TLM_AutoCoder.__exit__(self, exc_type, exc_value, traceback)

  def print_func(self):
    print "void log_tlm_%s(%s);" % (self.name, self.args)

  def autocode_single_tlm(self):
      self.print_func()

  def autocode_all_tlm(self):
    while True:
      self.parse_data()
      if self.eof(): break
      self.autocode_single_tlm()

  def autocode(self):
    self.header()
    self.autocode_all_tlm()

  

with CPP_AutoCoder(input_file) as coder:
  coder.autocode()

print
print
print
print
print "HEADER:"
print
print
with HPP_AutoCoder(input_file) as coder:
  coder.autocode()
