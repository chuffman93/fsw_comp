/*******************************************************
 *
 * THIS FILE IS AUTO-GENERATED, DO NOT EDIT THIS FILE!
 * To edit this file, edit /TLM/struct.txt, then
 * execute /TLM/struct_autocoder/autocode.sh
 *
 ******************************************************/

#include "servers/Structs.h"
#include "util/serialize.h"

namespace AllStar{
namespace Servers{

CDHStatus::CDHStatus() { }

CDHStatus::CDHStatus(float cpu1, float cpu5, float cpu15, float memory) {
  this->cpu1 = cpu1;
  this->cpu5 = cpu5;
  this->cpu15 = cpu15;
  this->memory = memory;
}

void CDHStatus::serialize(void) {
  this->serialize_float(this->cpu1);
  this->serialize_float(this->cpu5);
  this->serialize_float(this->cpu15);
  this->serialize_float(this->memory);
}

void CDHStatus::deserialize(void) {
  this->cpu1 = this->deserialize_float();
  this->cpu5 = this->deserialize_float();
  this->cpu15 = this->deserialize_float();
  this->memory = this->deserialize_float();
}

ACSStatus::ACSStatus() { }

ACSStatus::ACSStatus(uint32 MRP_X, uint32 MRP_Y, uint32 MRP_Z, uint32 ST_Status, uint32 RW_Speed_X, uint32 RW_Speed_Y, uint32 RW_Speed_Z) {
  this->MRP_X = MRP_X;
  this->MRP_Y = MRP_Y;
  this->MRP_Z = MRP_Z;
  this->ST_Status = ST_Status;
  this->RW_Speed_X = RW_Speed_X;
  this->RW_Speed_Y = RW_Speed_Y;
  this->RW_Speed_Z = RW_Speed_Z;
}

void ACSStatus::serialize(void) {
  this->serialize_uint32(this->MRP_X);
  this->serialize_uint32(this->MRP_Y);
  this->serialize_uint32(this->MRP_Z);
  this->serialize_uint32(this->ST_Status);
  this->serialize_uint32(this->RW_Speed_X);
  this->serialize_uint32(this->RW_Speed_Y);
  this->serialize_uint32(this->RW_Speed_Z);
}

void ACSStatus::deserialize(void) {
  this->MRP_X = this->deserialize_uint32();
  this->MRP_Y = this->deserialize_uint32();
  this->MRP_Z = this->deserialize_uint32();
  this->ST_Status = this->deserialize_uint32();
  this->RW_Speed_X = this->deserialize_uint32();
  this->RW_Speed_Y = this->deserialize_uint32();
  this->RW_Speed_Z = this->deserialize_uint32();
}

PLDStatus::PLDStatus() { }

PLDStatus::PLDStatus(uint8 powerFault, uint16 motorSpeed, uint8 thermistors[10], uint8 adcDataWorking, uint16 control, uint8 byteSize) {
  this->powerFault = powerFault;
  this->motorSpeed = motorSpeed;
  for (int iter = 0; iter < 10; iter++) {
    this->thermistors[iter] = thermistors[iter];
  }
  this->adcDataWorking = adcDataWorking;
  this->control = control;
  this->byteSize = byteSize;
}

void PLDStatus::serialize(void) {
  this->serialize_uint8(this->powerFault);
  this->serialize_uint16(this->motorSpeed);
  for (int iter = 0; iter < 10; iter++) {
    this->serialize_uint8(this->thermistors[iter]);
  }
  this->serialize_uint8(this->adcDataWorking);
  this->serialize_uint16(this->control);
  this->serialize_uint8(this->byteSize);
}

void PLDStatus::deserialize(void) {
  this->powerFault = this->deserialize_uint8();
  this->motorSpeed = this->deserialize_uint16();
  for (int iter = 0; iter < 10; iter++) {
    this->thermistors[iter] = this->deserialize_uint8();
  }
  this->adcDataWorking = this->deserialize_uint8();
  this->control = this->deserialize_uint16();
  this->byteSize = this->deserialize_uint8();
}

EPSStatus::EPSStatus() { }

EPSStatus::EPSStatus(uint16 current3v3, uint16 voltage3v3, uint16 currentVbat, uint16 voltageVbat, uint16 current12v, uint16 voltage12v, uint16 remainingCapacity, uint16 battCurrent, uint16 battVoltage, uint16 battStatus, uint16 frangCurrent, uint16 frangVoltage, uint16 convCurrentX, uint16 convThreshX, uint16 convCurrentY, uint16 convThreshY, uint16 convCurrentW, uint16 convThreshW) {
  this->current3v3 = current3v3;
  this->voltage3v3 = voltage3v3;
  this->currentVbat = currentVbat;
  this->voltageVbat = voltageVbat;
  this->current12v = current12v;
  this->voltage12v = voltage12v;
  this->remainingCapacity = remainingCapacity;
  this->battCurrent = battCurrent;
  this->battVoltage = battVoltage;
  this->battStatus = battStatus;
  this->frangCurrent = frangCurrent;
  this->frangVoltage = frangVoltage;
  this->convCurrentX = convCurrentX;
  this->convThreshX = convThreshX;
  this->convCurrentY = convCurrentY;
  this->convThreshY = convThreshY;
  this->convCurrentW = convCurrentW;
  this->convThreshW = convThreshW;
}

void EPSStatus::serialize(void) {
  this->serialize_uint16(this->current3v3);
  this->serialize_uint16(this->voltage3v3);
  this->serialize_uint16(this->currentVbat);
  this->serialize_uint16(this->voltageVbat);
  this->serialize_uint16(this->current12v);
  this->serialize_uint16(this->voltage12v);
  this->serialize_uint16(this->remainingCapacity);
  this->serialize_uint16(this->battCurrent);
  this->serialize_uint16(this->battVoltage);
  this->serialize_uint16(this->battStatus);
  this->serialize_uint16(this->frangCurrent);
  this->serialize_uint16(this->frangVoltage);
  this->serialize_uint16(this->convCurrentX);
  this->serialize_uint16(this->convThreshX);
  this->serialize_uint16(this->convCurrentY);
  this->serialize_uint16(this->convThreshY);
  this->serialize_uint16(this->convCurrentW);
  this->serialize_uint16(this->convThreshW);
}

void EPSStatus::deserialize(void) {
  this->current3v3 = this->deserialize_uint16();
  this->voltage3v3 = this->deserialize_uint16();
  this->currentVbat = this->deserialize_uint16();
  this->voltageVbat = this->deserialize_uint16();
  this->current12v = this->deserialize_uint16();
  this->voltage12v = this->deserialize_uint16();
  this->remainingCapacity = this->deserialize_uint16();
  this->battCurrent = this->deserialize_uint16();
  this->battVoltage = this->deserialize_uint16();
  this->battStatus = this->deserialize_uint16();
  this->frangCurrent = this->deserialize_uint16();
  this->frangVoltage = this->deserialize_uint16();
  this->convCurrentX = this->deserialize_uint16();
  this->convThreshX = this->deserialize_uint16();
  this->convCurrentY = this->deserialize_uint16();
  this->convThreshY = this->deserialize_uint16();
  this->convCurrentW = this->deserialize_uint16();
  this->convThreshW = this->deserialize_uint16();
}

CMDConfig::CMDConfig() { }

CMDConfig::CMDConfig(int32 resetPeriod, int32 fileChunkSize, int32 maxDownlinkSize, int32 beaconPeriod, int32 increasedBeaconPeriod) {
  this->resetPeriod = resetPeriod;
  this->fileChunkSize = fileChunkSize;
  this->maxDownlinkSize = maxDownlinkSize;
  this->beaconPeriod = beaconPeriod;
  this->increasedBeaconPeriod = increasedBeaconPeriod;
}

void CMDConfig::serialize(void) {
  this->serialize_int32(this->resetPeriod);
  this->serialize_int32(this->fileChunkSize);
  this->serialize_int32(this->maxDownlinkSize);
  this->serialize_int32(this->beaconPeriod);
  this->serialize_int32(this->increasedBeaconPeriod);
}

void CMDConfig::deserialize(void) {
  this->resetPeriod = this->deserialize_int32();
  this->fileChunkSize = this->deserialize_int32();
  this->maxDownlinkSize = this->deserialize_int32();
  this->beaconPeriod = this->deserialize_int32();
  this->increasedBeaconPeriod = this->deserialize_int32();
}

EPSConfig::EPSConfig() { }

EPSConfig::EPSConfig(uint16 minCOMCharge, uint16 minPLDCharge, uint16 minDSTCharge) {
  this->minCOMCharge = minCOMCharge;
  this->minPLDCharge = minPLDCharge;
  this->minDSTCharge = minDSTCharge;
}

void EPSConfig::serialize(void) {
  this->serialize_uint16(this->minCOMCharge);
  this->serialize_uint16(this->minPLDCharge);
  this->serialize_uint16(this->minDSTCharge);
}

void EPSConfig::deserialize(void) {
  this->minCOMCharge = this->deserialize_uint16();
  this->minPLDCharge = this->deserialize_uint16();
  this->minDSTCharge = this->deserialize_uint16();
}

}
}

