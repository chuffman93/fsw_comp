/*******************************************************
 *
 * THIS FILE IS AUTO-GENERATED, DO NOT EDIT THIS FILE!
 * To edit this file, edit /TLM/struct.txt, then
 * execute /TLM/struct_autocoder/autocode.sh
 *
 ******************************************************/

#include "servers/Structs.h"
#include "util/serialize.h"

namespace AllStar{
namespace Servers{

BeaconStruct::BeaconStruct() { 
  this->satTime = 0;
  this->GPSWeek = 0;
  this->GPSSec = 0;
  this->xPosition = 0;
  this->yPosition = 0;
  this->zPosition = 0;
  this->xVelocity = 0;
  this->yVelocity = 0;
  this->zVelocity = 0;
  this->systemMode = 0;
  this->subpowerStates = 0;
  this->epochNumber = 0;
  this->radNumber = 0;
  this->spiSent = 0;
  this->spiDropped = 0;
  this->batteryCap = 0;
  this->acsMode = 0;
  this->memory = 0;
  this->cpu15 = 0;
}

BeaconStruct::BeaconStruct(int32 satTime, int32 GPSWeek, float GPSSec, double xPosition, double yPosition, double zPosition, double xVelocity, double yVelocity, double zVelocity, uint8 systemMode, uint8 subpowerStates, int16 epochNumber, uint16 radNumber, uint32 spiSent, uint32 spiDropped, uint16 batteryCap, int8 acsMode, float memory, float cpu15) {
  this->satTime = satTime;
  this->GPSWeek = GPSWeek;
  this->GPSSec = GPSSec;
  this->xPosition = xPosition;
  this->yPosition = yPosition;
  this->zPosition = zPosition;
  this->xVelocity = xVelocity;
  this->yVelocity = yVelocity;
  this->zVelocity = zVelocity;
  this->systemMode = systemMode;
  this->subpowerStates = subpowerStates;
  this->epochNumber = epochNumber;
  this->radNumber = radNumber;
  this->spiSent = spiSent;
  this->spiDropped = spiDropped;
  this->batteryCap = batteryCap;
  this->acsMode = acsMode;
  this->memory = memory;
  this->cpu15 = cpu15;
}

void BeaconStruct::serialize(void) {
  this->serialize_int32(this->satTime);
  this->serialize_int32(this->GPSWeek);
  this->serialize_float(this->GPSSec);
  this->serialize_double(this->xPosition);
  this->serialize_double(this->yPosition);
  this->serialize_double(this->zPosition);
  this->serialize_double(this->xVelocity);
  this->serialize_double(this->yVelocity);
  this->serialize_double(this->zVelocity);
  this->serialize_uint8(this->systemMode);
  this->serialize_uint8(this->subpowerStates);
  this->serialize_int16(this->epochNumber);
  this->serialize_uint16(this->radNumber);
  this->serialize_uint32(this->spiSent);
  this->serialize_uint32(this->spiDropped);
  this->serialize_uint16(this->batteryCap);
  this->serialize_int8(this->acsMode);
  this->serialize_float(this->memory);
  this->serialize_float(this->cpu15);
}

void BeaconStruct::deserialize(void) {
  this->satTime = this->deserialize_int32();
  this->GPSWeek = this->deserialize_int32();
  this->GPSSec = this->deserialize_float();
  this->xPosition = this->deserialize_double();
  this->yPosition = this->deserialize_double();
  this->zPosition = this->deserialize_double();
  this->xVelocity = this->deserialize_double();
  this->yVelocity = this->deserialize_double();
  this->zVelocity = this->deserialize_double();
  this->systemMode = this->deserialize_uint8();
  this->subpowerStates = this->deserialize_uint8();
  this->epochNumber = this->deserialize_int16();
  this->radNumber = this->deserialize_uint16();
  this->spiSent = this->deserialize_uint32();
  this->spiDropped = this->deserialize_uint32();
  this->batteryCap = this->deserialize_uint16();
  this->acsMode = this->deserialize_int8();
  this->memory = this->deserialize_float();
  this->cpu15 = this->deserialize_float();
}

CDHStatus::CDHStatus() { 
  this->time = 0;
  this->cpu1 = 0;
  this->cpu5 = 0;
  this->cpu15 = 0;
  this->memory = 0;
}

CDHStatus::CDHStatus(int32 time, float cpu1, float cpu5, float cpu15, float memory) {
  this->time = time;
  this->cpu1 = cpu1;
  this->cpu5 = cpu5;
  this->cpu15 = cpu15;
  this->memory = memory;
}

void CDHStatus::serialize(void) {
  this->serialize_int32(this->time);
  this->serialize_float(this->cpu1);
  this->serialize_float(this->cpu5);
  this->serialize_float(this->cpu15);
  this->serialize_float(this->memory);
}

void CDHStatus::deserialize(void) {
  this->time = this->deserialize_int32();
  this->cpu1 = this->deserialize_float();
  this->cpu5 = this->deserialize_float();
  this->cpu15 = this->deserialize_float();
  this->memory = this->deserialize_float();
}

SWPStatus::SWPStatus() { 
  this->time = 0;
  for (int iter = 0; iter < 32; iter++) {
    this->hotswaps[iter] = 0;
  }
}

SWPStatus::SWPStatus(int32 time, float hotswaps[32]) {
  this->time = time;
  for (int iter = 0; iter < 32; iter++) {
    this->hotswaps[iter] = hotswaps[iter];
  }
}

void SWPStatus::serialize(void) {
  this->serialize_int32(this->time);
  for (int iter = 0; iter < 32; iter++) {
    this->serialize_float(this->hotswaps[iter]);
  }
}

void SWPStatus::deserialize(void) {
  this->time = this->deserialize_int32();
  for (int iter = 0; iter < 32; iter++) {
    this->hotswaps[iter] = this->deserialize_float();
  }
}

THMStatus::THMStatus() { 
  this->time = 0;
  for (int iter = 0; iter < 64; iter++) {
    this->tempSensors[iter] = 0;
  }
}

THMStatus::THMStatus(int32 time, float tempSensors[64]) {
  this->time = time;
  for (int iter = 0; iter < 64; iter++) {
    this->tempSensors[iter] = tempSensors[iter];
  }
}

void THMStatus::serialize(void) {
  this->serialize_int32(this->time);
  for (int iter = 0; iter < 64; iter++) {
    this->serialize_float(this->tempSensors[iter]);
  }
}

void THMStatus::deserialize(void) {
  this->time = this->deserialize_int32();
  for (int iter = 0; iter < 64; iter++) {
    this->tempSensors[iter] = this->deserialize_float();
  }
}

ACSStatus::ACSStatus() { 
  this->mag_x = 0;
  this->mag_y = 0;
  this->mag_z = 0;
  this->curr_mrp_x = 0;
  this->curr_mrp_y = 0;
  this->curr_mrp_z = 0;
  this->targ_mrp_x = 0;
  this->targ_mrp_y = 0;
  this->targ_mrp_z = 0;
  this->rwspeed_x = 0;
  this->rwspeed_y = 0;
  this->rwspeed_z = 0;
  this->angrate_x = 0;
  this->angrate_y = 0;
  this->angrate_z = 0;
  this->gyro_x = 0;
  this->gyro_y = 0;
  this->gyro_z = 0;
  this->rw_pwm_x = 0;
  this->rw_pwm_y = 0;
  this->rw_pwm_z = 0;
  this->tr_x = 0;
  this->tr_y = 0;
  this->tr_z = 0;
  this->mode = 0;
}

ACSStatus::ACSStatus(float mag_x, float mag_y, float mag_z, float curr_mrp_x, float curr_mrp_y, float curr_mrp_z, float targ_mrp_x, float targ_mrp_y, float targ_mrp_z, float rwspeed_x, float rwspeed_y, float rwspeed_z, float angrate_x, float angrate_y, float angrate_z, float gyro_x, float gyro_y, float gyro_z, float rw_pwm_x, float rw_pwm_y, float rw_pwm_z, float tr_x, float tr_y, float tr_z, int8 mode) {
  this->mag_x = mag_x;
  this->mag_y = mag_y;
  this->mag_z = mag_z;
  this->curr_mrp_x = curr_mrp_x;
  this->curr_mrp_y = curr_mrp_y;
  this->curr_mrp_z = curr_mrp_z;
  this->targ_mrp_x = targ_mrp_x;
  this->targ_mrp_y = targ_mrp_y;
  this->targ_mrp_z = targ_mrp_z;
  this->rwspeed_x = rwspeed_x;
  this->rwspeed_y = rwspeed_y;
  this->rwspeed_z = rwspeed_z;
  this->angrate_x = angrate_x;
  this->angrate_y = angrate_y;
  this->angrate_z = angrate_z;
  this->gyro_x = gyro_x;
  this->gyro_y = gyro_y;
  this->gyro_z = gyro_z;
  this->rw_pwm_x = rw_pwm_x;
  this->rw_pwm_y = rw_pwm_y;
  this->rw_pwm_z = rw_pwm_z;
  this->tr_x = tr_x;
  this->tr_y = tr_y;
  this->tr_z = tr_z;
  this->mode = mode;
}

void ACSStatus::serialize(void) {
  this->serialize_float(this->mag_x);
  this->serialize_float(this->mag_y);
  this->serialize_float(this->mag_z);
  this->serialize_float(this->curr_mrp_x);
  this->serialize_float(this->curr_mrp_y);
  this->serialize_float(this->curr_mrp_z);
  this->serialize_float(this->targ_mrp_x);
  this->serialize_float(this->targ_mrp_y);
  this->serialize_float(this->targ_mrp_z);
  this->serialize_float(this->rwspeed_x);
  this->serialize_float(this->rwspeed_y);
  this->serialize_float(this->rwspeed_z);
  this->serialize_float(this->angrate_x);
  this->serialize_float(this->angrate_y);
  this->serialize_float(this->angrate_z);
  this->serialize_float(this->gyro_x);
  this->serialize_float(this->gyro_y);
  this->serialize_float(this->gyro_z);
  this->serialize_float(this->rw_pwm_x);
  this->serialize_float(this->rw_pwm_y);
  this->serialize_float(this->rw_pwm_z);
  this->serialize_float(this->tr_x);
  this->serialize_float(this->tr_y);
  this->serialize_float(this->tr_z);
  this->serialize_int8(this->mode);
}

void ACSStatus::deserialize(void) {
  this->mag_x = this->deserialize_float();
  this->mag_y = this->deserialize_float();
  this->mag_z = this->deserialize_float();
  this->curr_mrp_x = this->deserialize_float();
  this->curr_mrp_y = this->deserialize_float();
  this->curr_mrp_z = this->deserialize_float();
  this->targ_mrp_x = this->deserialize_float();
  this->targ_mrp_y = this->deserialize_float();
  this->targ_mrp_z = this->deserialize_float();
  this->rwspeed_x = this->deserialize_float();
  this->rwspeed_y = this->deserialize_float();
  this->rwspeed_z = this->deserialize_float();
  this->angrate_x = this->deserialize_float();
  this->angrate_y = this->deserialize_float();
  this->angrate_z = this->deserialize_float();
  this->gyro_x = this->deserialize_float();
  this->gyro_y = this->deserialize_float();
  this->gyro_z = this->deserialize_float();
  this->rw_pwm_x = this->deserialize_float();
  this->rw_pwm_y = this->deserialize_float();
  this->rw_pwm_z = this->deserialize_float();
  this->tr_x = this->deserialize_float();
  this->tr_y = this->deserialize_float();
  this->tr_z = this->deserialize_float();
  this->mode = this->deserialize_int8();
}

PLDStatus::PLDStatus() { 
  this->powerFault = 0;
  this->motorSpeed = 0;
  for (int iter = 0; iter < 10; iter++) {
    this->thermistors[iter] = 0;
  }
  this->adcDataWorking = 0;
  this->control = 0;
}

PLDStatus::PLDStatus(uint8 powerFault, uint16 motorSpeed, uint8 thermistors[10], uint8 adcDataWorking, uint16 control) {
  this->powerFault = powerFault;
  this->motorSpeed = motorSpeed;
  for (int iter = 0; iter < 10; iter++) {
    this->thermistors[iter] = thermistors[iter];
  }
  this->adcDataWorking = adcDataWorking;
  this->control = control;
}

void PLDStatus::serialize(void) {
  this->serialize_uint8(this->powerFault);
  this->serialize_uint16(this->motorSpeed);
  for (int iter = 0; iter < 10; iter++) {
    this->serialize_uint8(this->thermistors[iter]);
  }
  this->serialize_uint8(this->adcDataWorking);
  this->serialize_uint16(this->control);
}

void PLDStatus::deserialize(void) {
  this->powerFault = this->deserialize_uint8();
  this->motorSpeed = this->deserialize_uint16();
  for (int iter = 0; iter < 10; iter++) {
    this->thermistors[iter] = this->deserialize_uint8();
  }
  this->adcDataWorking = this->deserialize_uint8();
  this->control = this->deserialize_uint16();
}

EPSStatus::EPSStatus() { 
  this->current3v3 = 0;
  this->voltage3v3 = 0;
  this->currentVbat = 0;
  this->voltageVbat = 0;
  this->current12v = 0;
  this->voltage12v = 0;
  this->remainingCapacity = 0;
  this->battCurrent = 0;
  this->battVoltage = 0;
  this->battStatus = 0;
  this->frangCurrent = 0;
  this->frangVoltage = 0;
  this->convCurrentX = 0;
  this->convThreshX = 0;
  this->convCurrentY = 0;
  this->convThreshY = 0;
  this->convCurrentW = 0;
  this->convThreshW = 0;
}

EPSStatus::EPSStatus(uint16 current3v3, uint16 voltage3v3, uint16 currentVbat, uint16 voltageVbat, uint16 current12v, uint16 voltage12v, uint16 remainingCapacity, uint16 battCurrent, uint16 battVoltage, uint16 battStatus, uint16 frangCurrent, uint16 frangVoltage, uint16 convCurrentX, uint16 convThreshX, uint16 convCurrentY, uint16 convThreshY, uint16 convCurrentW, uint16 convThreshW) {
  this->current3v3 = current3v3;
  this->voltage3v3 = voltage3v3;
  this->currentVbat = currentVbat;
  this->voltageVbat = voltageVbat;
  this->current12v = current12v;
  this->voltage12v = voltage12v;
  this->remainingCapacity = remainingCapacity;
  this->battCurrent = battCurrent;
  this->battVoltage = battVoltage;
  this->battStatus = battStatus;
  this->frangCurrent = frangCurrent;
  this->frangVoltage = frangVoltage;
  this->convCurrentX = convCurrentX;
  this->convThreshX = convThreshX;
  this->convCurrentY = convCurrentY;
  this->convThreshY = convThreshY;
  this->convCurrentW = convCurrentW;
  this->convThreshW = convThreshW;
}

void EPSStatus::serialize(void) {
  this->serialize_uint16(this->current3v3);
  this->serialize_uint16(this->voltage3v3);
  this->serialize_uint16(this->currentVbat);
  this->serialize_uint16(this->voltageVbat);
  this->serialize_uint16(this->current12v);
  this->serialize_uint16(this->voltage12v);
  this->serialize_uint16(this->remainingCapacity);
  this->serialize_uint16(this->battCurrent);
  this->serialize_uint16(this->battVoltage);
  this->serialize_uint16(this->battStatus);
  this->serialize_uint16(this->frangCurrent);
  this->serialize_uint16(this->frangVoltage);
  this->serialize_uint16(this->convCurrentX);
  this->serialize_uint16(this->convThreshX);
  this->serialize_uint16(this->convCurrentY);
  this->serialize_uint16(this->convThreshY);
  this->serialize_uint16(this->convCurrentW);
  this->serialize_uint16(this->convThreshW);
}

void EPSStatus::deserialize(void) {
  this->current3v3 = this->deserialize_uint16();
  this->voltage3v3 = this->deserialize_uint16();
  this->currentVbat = this->deserialize_uint16();
  this->voltageVbat = this->deserialize_uint16();
  this->current12v = this->deserialize_uint16();
  this->voltage12v = this->deserialize_uint16();
  this->remainingCapacity = this->deserialize_uint16();
  this->battCurrent = this->deserialize_uint16();
  this->battVoltage = this->deserialize_uint16();
  this->battStatus = this->deserialize_uint16();
  this->frangCurrent = this->deserialize_uint16();
  this->frangVoltage = this->deserialize_uint16();
  this->convCurrentX = this->deserialize_uint16();
  this->convThreshX = this->deserialize_uint16();
  this->convCurrentY = this->deserialize_uint16();
  this->convThreshY = this->deserialize_uint16();
  this->convCurrentW = this->deserialize_uint16();
  this->convThreshW = this->deserialize_uint16();
}

GPSPositionTime::GPSPositionTime() { 
  this->posX = 0;
  this->posY = 0;
  this->posZ = 0;
  this->velX = 0;
  this->velY = 0;
  this->velZ = 0;
  this->GPSWeek = 0;
  this->GPSSec = 0;
}

GPSPositionTime::GPSPositionTime(double posX, double posY, double posZ, double velX, double velY, double velZ, uint16 GPSWeek, float GPSSec) {
  this->posX = posX;
  this->posY = posY;
  this->posZ = posZ;
  this->velX = velX;
  this->velY = velY;
  this->velZ = velZ;
  this->GPSWeek = GPSWeek;
  this->GPSSec = GPSSec;
}

void GPSPositionTime::serialize(void) {
  this->serialize_double(this->posX);
  this->serialize_double(this->posY);
  this->serialize_double(this->posZ);
  this->serialize_double(this->velX);
  this->serialize_double(this->velY);
  this->serialize_double(this->velZ);
  this->serialize_uint16(this->GPSWeek);
  this->serialize_float(this->GPSSec);
}

void GPSPositionTime::deserialize(void) {
  this->posX = this->deserialize_double();
  this->posY = this->deserialize_double();
  this->posZ = this->deserialize_double();
  this->velX = this->deserialize_double();
  this->velY = this->deserialize_double();
  this->velZ = this->deserialize_double();
  this->GPSWeek = this->deserialize_uint16();
  this->GPSSec = this->deserialize_float();
}

GPSInertial::GPSInertial() { 
  this->posX = 0;
  this->posY = 0;
  this->posZ = 0;
  this->velX = 0;
  this->velY = 0;
  this->velZ = 0;
  this->GPSWeek = 0;
  this->GPSSec = 0;
  this->isAccurate = 0;
}

GPSInertial::GPSInertial(double posX, double posY, double posZ, double velX, double velY, double velZ, uint16 GPSWeek, float GPSSec, uint8 isAccurate) {
  this->posX = posX;
  this->posY = posY;
  this->posZ = posZ;
  this->velX = velX;
  this->velY = velY;
  this->velZ = velZ;
  this->GPSWeek = GPSWeek;
  this->GPSSec = GPSSec;
  this->isAccurate = isAccurate;
}

void GPSInertial::serialize(void) {
  this->serialize_double(this->posX);
  this->serialize_double(this->posY);
  this->serialize_double(this->posZ);
  this->serialize_double(this->velX);
  this->serialize_double(this->velY);
  this->serialize_double(this->velZ);
  this->serialize_uint16(this->GPSWeek);
  this->serialize_float(this->GPSSec);
  this->serialize_uint8(this->isAccurate);
}

void GPSInertial::deserialize(void) {
  this->posX = this->deserialize_double();
  this->posY = this->deserialize_double();
  this->posZ = this->deserialize_double();
  this->velX = this->deserialize_double();
  this->velY = this->deserialize_double();
  this->velZ = this->deserialize_double();
  this->GPSWeek = this->deserialize_uint16();
  this->GPSSec = this->deserialize_float();
  this->isAccurate = this->deserialize_uint8();
}

ACSmrp::ACSmrp() { 
  this->mrpX = 0;
  this->mrpY = 0;
  this->mrpZ = 0;
}

ACSmrp::ACSmrp(float mrpX, float mrpY, float mrpZ) {
  this->mrpX = mrpX;
  this->mrpY = mrpY;
  this->mrpZ = mrpZ;
}

void ACSmrp::serialize(void) {
  this->serialize_float(this->mrpX);
  this->serialize_float(this->mrpY);
  this->serialize_float(this->mrpZ);
}

void ACSmrp::deserialize(void) {
  this->mrpX = this->deserialize_float();
  this->mrpY = this->deserialize_float();
  this->mrpZ = this->deserialize_float();
}

ACSConfig::ACSConfig() { 
  this->testConfig = 0;
}

ACSConfig::ACSConfig(int32 testConfig) {
  this->testConfig = testConfig;
}

void ACSConfig::serialize(void) {
  this->serialize_int32(this->testConfig);
}

void ACSConfig::deserialize(void) {
  this->testConfig = this->deserialize_int32();
}

CDHConfig::CDHConfig() { 
  this->testConfig = 0;
}

CDHConfig::CDHConfig(int32 testConfig) {
  this->testConfig = testConfig;
}

void CDHConfig::serialize(void) {
  this->serialize_int32(this->testConfig);
}

void CDHConfig::deserialize(void) {
  this->testConfig = this->deserialize_int32();
}

CMDConfig::CMDConfig() { 
  this->resetPeriod = 0;
  this->fileChunkSize = 0;
  this->maxDownlinkSize = 0;
  this->beaconPeriod = 0;
  this->increasedBeaconPeriod = 0;
  this->expectedRebootDuration = 0;
}

CMDConfig::CMDConfig(int32 resetPeriod, int32 fileChunkSize, int32 maxDownlinkSize, int32 beaconPeriod, int32 increasedBeaconPeriod, uint16 expectedRebootDuration) {
  this->resetPeriod = resetPeriod;
  this->fileChunkSize = fileChunkSize;
  this->maxDownlinkSize = maxDownlinkSize;
  this->beaconPeriod = beaconPeriod;
  this->increasedBeaconPeriod = increasedBeaconPeriod;
  this->expectedRebootDuration = expectedRebootDuration;
}

void CMDConfig::serialize(void) {
  this->serialize_int32(this->resetPeriod);
  this->serialize_int32(this->fileChunkSize);
  this->serialize_int32(this->maxDownlinkSize);
  this->serialize_int32(this->beaconPeriod);
  this->serialize_int32(this->increasedBeaconPeriod);
  this->serialize_uint16(this->expectedRebootDuration);
}

void CMDConfig::deserialize(void) {
  this->resetPeriod = this->deserialize_int32();
  this->fileChunkSize = this->deserialize_int32();
  this->maxDownlinkSize = this->deserialize_int32();
  this->beaconPeriod = this->deserialize_int32();
  this->increasedBeaconPeriod = this->deserialize_int32();
  this->expectedRebootDuration = this->deserialize_uint16();
}

COMConfig::COMConfig() { 
  this->testConfig = 0;
}

COMConfig::COMConfig(int32 testConfig) {
  this->testConfig = testConfig;
}

void COMConfig::serialize(void) {
  this->serialize_int32(this->testConfig);
}

void COMConfig::deserialize(void) {
  this->testConfig = this->deserialize_int32();
}

EPSConfig::EPSConfig() { 
  this->minCOMCharge = 0;
  this->minPLDCharge = 0;
  this->minDSTCharge = 0;
}

EPSConfig::EPSConfig(uint16 minCOMCharge, uint16 minPLDCharge, uint16 minDSTCharge) {
  this->minCOMCharge = minCOMCharge;
  this->minPLDCharge = minPLDCharge;
  this->minDSTCharge = minDSTCharge;
}

void EPSConfig::serialize(void) {
  this->serialize_uint16(this->minCOMCharge);
  this->serialize_uint16(this->minPLDCharge);
  this->serialize_uint16(this->minDSTCharge);
}

void EPSConfig::deserialize(void) {
  this->minCOMCharge = this->deserialize_uint16();
  this->minPLDCharge = this->deserialize_uint16();
  this->minDSTCharge = this->deserialize_uint16();
}

FMGConfig::FMGConfig() { 
  this->testConfig = 0;
}

FMGConfig::FMGConfig(int32 testConfig) {
  this->testConfig = testConfig;
}

void FMGConfig::serialize(void) {
  this->serialize_int32(this->testConfig);
}

void FMGConfig::deserialize(void) {
  this->testConfig = this->deserialize_int32();
}

GPSConfig::GPSConfig() { 
  this->a = 0;
  this->e = 0;
  this->i = 0;
  this->Omega = 0;
  this->omega = 0;
  this->anom = 0;
  this->epochSeconds = 0;
}

GPSConfig::GPSConfig(float a, float e, float i, float Omega, float omega, float anom, float epochSeconds) {
  this->a = a;
  this->e = e;
  this->i = i;
  this->Omega = Omega;
  this->omega = omega;
  this->anom = anom;
  this->epochSeconds = epochSeconds;
}

void GPSConfig::serialize(void) {
  this->serialize_float(this->a);
  this->serialize_float(this->e);
  this->serialize_float(this->i);
  this->serialize_float(this->Omega);
  this->serialize_float(this->omega);
  this->serialize_float(this->anom);
  this->serialize_float(this->epochSeconds);
}

void GPSConfig::deserialize(void) {
  this->a = this->deserialize_float();
  this->e = this->deserialize_float();
  this->i = this->deserialize_float();
  this->Omega = this->deserialize_float();
  this->omega = this->deserialize_float();
  this->anom = this->deserialize_float();
  this->epochSeconds = this->deserialize_float();
}

PLDConfig::PLDConfig() { 
  this->chunkSize = 0;
}

PLDConfig::PLDConfig(int32 chunkSize) {
  this->chunkSize = chunkSize;
}

void PLDConfig::serialize(void) {
  this->serialize_int32(this->chunkSize);
}

void PLDConfig::deserialize(void) {
  this->chunkSize = this->deserialize_int32();
}

SCHItem::SCHItem() { 
  for (int iter = 0; iter < 3; iter++) {
    this->ecefPos[iter] = 0;
  }
  this->radius = 0;
  this->enter_mode = 0;
  this->timeout = 0;
  this->mode = 0;
  this->duration = 0;
}

SCHItem::SCHItem(double ecefPos[3], double radius, uint8 enter_mode, uint32 timeout, uint8 mode, int32 duration) {
  for (int iter = 0; iter < 3; iter++) {
    this->ecefPos[iter] = ecefPos[iter];
  }
  this->radius = radius;
  this->enter_mode = enter_mode;
  this->timeout = timeout;
  this->mode = mode;
  this->duration = duration;
}

void SCHItem::serialize(void) {
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_double(this->ecefPos[iter]);
  }
  this->serialize_double(this->radius);
  this->serialize_uint8(this->enter_mode);
  this->serialize_uint32(this->timeout);
  this->serialize_uint8(this->mode);
  this->serialize_int32(this->duration);
}

void SCHItem::deserialize(void) {
  for (int iter = 0; iter < 3; iter++) {
    this->ecefPos[iter] = this->deserialize_double();
  }
  this->radius = this->deserialize_double();
  this->enter_mode = this->deserialize_uint8();
  this->timeout = this->deserialize_uint32();
  this->mode = this->deserialize_uint8();
  this->duration = this->deserialize_int32();
}

}
}

