/*******************************************************
 *
 * THIS FILE IS AUTO-GENERATED, DO NOT EDIT THIS FILE!
 * To edit this file, edit /TLM/struct.txt, then
 * execute /TLM/struct_autocoder/autocode.sh
 *
 ******************************************************/

#include "servers/Structs.h"
#include "util/serialize.h"

namespace AllStar{
namespace Servers{

BeaconStruct::BeaconStruct() { 
  this->satTime = 0;
  this->GPSWeek = 0;
  this->GPSSec = 0;
  this->xPosition = 0;
  this->yPosition = 0;
  this->zPosition = 0;
  this->xVelocity = 0;
  this->yVelocity = 0;
  this->zVelocity = 0;
  this->systemMode = 0;
  this->subpowerStates = 0;
  this->epochNumber = 0;
  this->radNumber = 0;
  this->spiSent = 0;
  this->spiDropped = 0;
  this->batteryCap = 0;
  this->acsMode = 0;
  this->memory = 0;
  this->cpu15 = 0;
}

BeaconStruct::BeaconStruct(int32 satTime, int32 GPSWeek, float GPSSec, double xPosition, double yPosition, double zPosition, double xVelocity, double yVelocity, double zVelocity, uint8 systemMode, uint8 subpowerStates, int16 epochNumber, uint16 radNumber, uint32 spiSent, uint32 spiDropped, uint16 batteryCap, int8 acsMode, float memory, float cpu15) {
  this->satTime = satTime;
  this->GPSWeek = GPSWeek;
  this->GPSSec = GPSSec;
  this->xPosition = xPosition;
  this->yPosition = yPosition;
  this->zPosition = zPosition;
  this->xVelocity = xVelocity;
  this->yVelocity = yVelocity;
  this->zVelocity = zVelocity;
  this->systemMode = systemMode;
  this->subpowerStates = subpowerStates;
  this->epochNumber = epochNumber;
  this->radNumber = radNumber;
  this->spiSent = spiSent;
  this->spiDropped = spiDropped;
  this->batteryCap = batteryCap;
  this->acsMode = acsMode;
  this->memory = memory;
  this->cpu15 = cpu15;
}

void BeaconStruct::serialize(void) {
  this->serialize_int32(this->satTime);
  this->serialize_int32(this->GPSWeek);
  this->serialize_float(this->GPSSec);
  this->serialize_double(this->xPosition);
  this->serialize_double(this->yPosition);
  this->serialize_double(this->zPosition);
  this->serialize_double(this->xVelocity);
  this->serialize_double(this->yVelocity);
  this->serialize_double(this->zVelocity);
  this->serialize_uint8(this->systemMode);
  this->serialize_uint8(this->subpowerStates);
  this->serialize_int16(this->epochNumber);
  this->serialize_uint16(this->radNumber);
  this->serialize_uint32(this->spiSent);
  this->serialize_uint32(this->spiDropped);
  this->serialize_uint16(this->batteryCap);
  this->serialize_int8(this->acsMode);
  this->serialize_float(this->memory);
  this->serialize_float(this->cpu15);
}

void BeaconStruct::deserialize(void) {
  this->satTime = this->deserialize_int32();
  this->GPSWeek = this->deserialize_int32();
  this->GPSSec = this->deserialize_float();
  this->xPosition = this->deserialize_double();
  this->yPosition = this->deserialize_double();
  this->zPosition = this->deserialize_double();
  this->xVelocity = this->deserialize_double();
  this->yVelocity = this->deserialize_double();
  this->zVelocity = this->deserialize_double();
  this->systemMode = this->deserialize_uint8();
  this->subpowerStates = this->deserialize_uint8();
  this->epochNumber = this->deserialize_int16();
  this->radNumber = this->deserialize_uint16();
  this->spiSent = this->deserialize_uint32();
  this->spiDropped = this->deserialize_uint32();
  this->batteryCap = this->deserialize_uint16();
  this->acsMode = this->deserialize_int8();
  this->memory = this->deserialize_float();
  this->cpu15 = this->deserialize_float();
}

CDHStatus::CDHStatus() { 
  this->time = 0;
  this->cpu1 = 0;
  this->cpu5 = 0;
  this->cpu15 = 0;
  this->memory = 0;
}

CDHStatus::CDHStatus(int32 time, float cpu1, float cpu5, float cpu15, float memory) {
  this->time = time;
  this->cpu1 = cpu1;
  this->cpu5 = cpu5;
  this->cpu15 = cpu15;
  this->memory = memory;
}

void CDHStatus::serialize(void) {
  this->serialize_int32(this->time);
  this->serialize_float(this->cpu1);
  this->serialize_float(this->cpu5);
  this->serialize_float(this->cpu15);
  this->serialize_float(this->memory);
}

void CDHStatus::deserialize(void) {
  this->time = this->deserialize_int32();
  this->cpu1 = this->deserialize_float();
  this->cpu5 = this->deserialize_float();
  this->cpu15 = this->deserialize_float();
  this->memory = this->deserialize_float();
}

SWPStatus::SWPStatus() { 
  this->time = 0;
  for (int iter = 0; iter < 32; iter++) {
    this->hotswaps[iter] = 0;
  }
}

SWPStatus::SWPStatus(int32 time, float hotswaps[32]) {
  this->time = time;
  for (int iter = 0; iter < 32; iter++) {
    this->hotswaps[iter] = hotswaps[iter];
  }
}

void SWPStatus::serialize(void) {
  this->serialize_int32(this->time);
  for (int iter = 0; iter < 32; iter++) {
    this->serialize_float(this->hotswaps[iter]);
  }
}

void SWPStatus::deserialize(void) {
  this->time = this->deserialize_int32();
  for (int iter = 0; iter < 32; iter++) {
    this->hotswaps[iter] = this->deserialize_float();
  }
}

THMStatus::THMStatus() { 
  this->time = 0;
  for (int iter = 0; iter < 64; iter++) {
    this->tempSensors[iter] = 0;
  }
}

THMStatus::THMStatus(int32 time, float tempSensors[64]) {
  this->time = time;
  for (int iter = 0; iter < 64; iter++) {
    this->tempSensors[iter] = tempSensors[iter];
  }
}

void THMStatus::serialize(void) {
  this->serialize_int32(this->time);
  for (int iter = 0; iter < 64; iter++) {
    this->serialize_float(this->tempSensors[iter]);
  }
}

void THMStatus::deserialize(void) {
  this->time = this->deserialize_int32();
  for (int iter = 0; iter < 64; iter++) {
    this->tempSensors[iter] = this->deserialize_float();
  }
}

ACSStatus::ACSStatus() { 
  this->mode = 0;
  for (int iter = 0; iter < 3; iter++) {
    this->st_mrp[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->curr_mrp[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->ref_mrp[iter] = 0;
  }
  this->time_since_lock = 0;
  for (int iter = 0; iter < 3; iter++) {
    this->gyro0[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->gryo1[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->ang_rate[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->mag0[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->mag1[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->rw_torque[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->rw_pwm[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->rw_speed[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->tr_torque[iter] = 0;
  }
  for (int iter = 0; iter < 3; iter++) {
    this->tr_pwm[iter] = 0;
  }
}

ACSStatus::ACSStatus(uint8 mode, float st_mrp[3], float curr_mrp[3], float ref_mrp[3], float time_since_lock, float gyro0[3], float gryo1[3], float ang_rate[3], float mag0[3], float mag1[3], float rw_torque[3], float rw_pwm[3], float rw_speed[3], float tr_torque[3], float tr_pwm[3]) {
  this->mode = mode;
  for (int iter = 0; iter < 3; iter++) {
    this->st_mrp[iter] = st_mrp[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->curr_mrp[iter] = curr_mrp[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->ref_mrp[iter] = ref_mrp[iter];
  }
  this->time_since_lock = time_since_lock;
  for (int iter = 0; iter < 3; iter++) {
    this->gyro0[iter] = gyro0[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->gryo1[iter] = gryo1[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->ang_rate[iter] = ang_rate[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->mag0[iter] = mag0[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->mag1[iter] = mag1[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->rw_torque[iter] = rw_torque[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->rw_pwm[iter] = rw_pwm[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->rw_speed[iter] = rw_speed[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->tr_torque[iter] = tr_torque[iter];
  }
  for (int iter = 0; iter < 3; iter++) {
    this->tr_pwm[iter] = tr_pwm[iter];
  }
}

void ACSStatus::serialize(void) {
  this->serialize_uint8(this->mode);
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->st_mrp[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->curr_mrp[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->ref_mrp[iter]);
  }
  this->serialize_float(this->time_since_lock);
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->gyro0[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->gryo1[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->ang_rate[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->mag0[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->mag1[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->rw_torque[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->rw_pwm[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->rw_speed[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->tr_torque[iter]);
  }
  for (int iter = 0; iter < 3; iter++) {
    this->serialize_float(this->tr_pwm[iter]);
  }
}

void ACSStatus::deserialize(void) {
  this->mode = this->deserialize_uint8();
  for (int iter = 0; iter < 3; iter++) {
    this->st_mrp[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->curr_mrp[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->ref_mrp[iter] = this->deserialize_float();
  }
  this->time_since_lock = this->deserialize_float();
  for (int iter = 0; iter < 3; iter++) {
    this->gyro0[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->gryo1[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->ang_rate[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->mag0[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->mag1[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->rw_torque[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->rw_pwm[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->rw_speed[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->tr_torque[iter] = this->deserialize_float();
  }
  for (int iter = 0; iter < 3; iter++) {
    this->tr_pwm[iter] = this->deserialize_float();
  }
}

PLDStatus::PLDStatus() { 
  this->powerFault = 0;
  this->motorSpeed = 0;
  for (int iter = 0; iter < 10; iter++) {
    this->thermistors[iter] = 0;
  }
  this->adcDataWorking = 0;
  this->control = 0;
}

PLDStatus::PLDStatus(uint8 powerFault, uint16 motorSpeed, uint8 thermistors[10], uint8 adcDataWorking, uint16 control) {
  this->powerFault = powerFault;
  this->motorSpeed = motorSpeed;
  for (int iter = 0; iter < 10; iter++) {
    this->thermistors[iter] = thermistors[iter];
  }
  this->adcDataWorking = adcDataWorking;
  this->control = control;
}

void PLDStatus::serialize(void) {
  this->serialize_uint8(this->powerFault);
  this->serialize_uint16(this->motorSpeed);
  for (int iter = 0; iter < 10; iter++) {
    this->serialize_uint8(this->thermistors[iter]);
  }
  this->serialize_uint8(this->adcDataWorking);
  this->serialize_uint16(this->control);
}

void PLDStatus::deserialize(void) {
  this->powerFault = this->deserialize_uint8();
  this->motorSpeed = this->deserialize_uint16();
  for (int iter = 0; iter < 10; iter++) {
    this->thermistors[iter] = this->deserialize_uint8();
  }
  this->adcDataWorking = this->deserialize_uint8();
  this->control = this->deserialize_uint16();
}

EPSStatus::EPSStatus() { 
  this->current3v3 = 0;
  this->voltage3v3 = 0;
  this->currentVbat = 0;
  this->voltageVbat = 0;
  this->current12v = 0;
  this->voltage12v = 0;
  this->remainingCapacity = 0;
  this->battCurrent = 0;
  this->battVoltage = 0;
  this->battStatus = 0;
  this->frangCurrent = 0;
  this->frangVoltage = 0;
  this->convCurrentX = 0;
  this->convThreshX = 0;
  this->convCurrentY = 0;
  this->convThreshY = 0;
  this->convCurrentW = 0;
  this->convThreshW = 0;
}

EPSStatus::EPSStatus(uint16 current3v3, uint16 voltage3v3, uint16 currentVbat, uint16 voltageVbat, uint16 current12v, uint16 voltage12v, uint16 remainingCapacity, uint16 battCurrent, uint16 battVoltage, uint16 battStatus, uint16 frangCurrent, uint16 frangVoltage, uint16 convCurrentX, uint16 convThreshX, uint16 convCurrentY, uint16 convThreshY, uint16 convCurrentW, uint16 convThreshW) {
  this->current3v3 = current3v3;
  this->voltage3v3 = voltage3v3;
  this->currentVbat = currentVbat;
  this->voltageVbat = voltageVbat;
  this->current12v = current12v;
  this->voltage12v = voltage12v;
  this->remainingCapacity = remainingCapacity;
  this->battCurrent = battCurrent;
  this->battVoltage = battVoltage;
  this->battStatus = battStatus;
  this->frangCurrent = frangCurrent;
  this->frangVoltage = frangVoltage;
  this->convCurrentX = convCurrentX;
  this->convThreshX = convThreshX;
  this->convCurrentY = convCurrentY;
  this->convThreshY = convThreshY;
  this->convCurrentW = convCurrentW;
  this->convThreshW = convThreshW;
}

void EPSStatus::serialize(void) {
  this->serialize_uint16(this->current3v3);
  this->serialize_uint16(this->voltage3v3);
  this->serialize_uint16(this->currentVbat);
  this->serialize_uint16(this->voltageVbat);
  this->serialize_uint16(this->current12v);
  this->serialize_uint16(this->voltage12v);
  this->serialize_uint16(this->remainingCapacity);
  this->serialize_uint16(this->battCurrent);
  this->serialize_uint16(this->battVoltage);
  this->serialize_uint16(this->battStatus);
  this->serialize_uint16(this->frangCurrent);
  this->serialize_uint16(this->frangVoltage);
  this->serialize_uint16(this->convCurrentX);
  this->serialize_uint16(this->convThreshX);
  this->serialize_uint16(this->convCurrentY);
  this->serialize_uint16(this->convThreshY);
  this->serialize_uint16(this->convCurrentW);
  this->serialize_uint16(this->convThreshW);
}

void EPSStatus::deserialize(void) {
  this->current3v3 = this->deserialize_uint16();
  this->voltage3v3 = this->deserialize_uint16();
  this->currentVbat = this->deserialize_uint16();
  this->voltageVbat = this->deserialize_uint16();
  this->current12v = this->deserialize_uint16();
  this->voltage12v = this->deserialize_uint16();
  this->remainingCapacity = this->deserialize_uint16();
  this->battCurrent = this->deserialize_uint16();
  this->battVoltage = this->deserialize_uint16();
  this->battStatus = this->deserialize_uint16();
  this->frangCurrent = this->deserialize_uint16();
  this->frangVoltage = this->deserialize_uint16();
  this->convCurrentX = this->deserialize_uint16();
  this->convThreshX = this->deserialize_uint16();
  this->convCurrentY = this->deserialize_uint16();
  this->convThreshY = this->deserialize_uint16();
  this->convCurrentW = this->deserialize_uint16();
  this->convThreshW = this->deserialize_uint16();
}

GPSPositionTime::GPSPositionTime() { 
  this->posX = 0;
  this->posY = 0;
  this->posZ = 0;
  this->velX = 0;
  this->velY = 0;
  this->velZ = 0;
  this->GPSWeek = 0;
  this->GPSSec = 0;
}

GPSPositionTime::GPSPositionTime(double posX, double posY, double posZ, double velX, double velY, double velZ, uint16 GPSWeek, float GPSSec) {
  this->posX = posX;
  this->posY = posY;
  this->posZ = posZ;
  this->velX = velX;
  this->velY = velY;
  this->velZ = velZ;
  this->GPSWeek = GPSWeek;
  this->GPSSec = GPSSec;
}

void GPSPositionTime::serialize(void) {
  this->serialize_double(this->posX);
  this->serialize_double(this->posY);
  this->serialize_double(this->posZ);
  this->serialize_double(this->velX);
  this->serialize_double(this->velY);
  this->serialize_double(this->velZ);
  this->serialize_uint16(this->GPSWeek);
  this->serialize_float(this->GPSSec);
}

void GPSPositionTime::deserialize(void) {
  this->posX = this->deserialize_double();
  this->posY = this->deserialize_double();
  this->posZ = this->deserialize_double();
  this->velX = this->deserialize_double();
  this->velY = this->deserialize_double();
  this->velZ = this->deserialize_double();
  this->GPSWeek = this->deserialize_uint16();
  this->GPSSec = this->deserialize_float();
}

GPSInertial::GPSInertial() { 
  this->posX = 0;
  this->posY = 0;
  this->posZ = 0;
  this->velX = 0;
  this->velY = 0;
  this->velZ = 0;
  this->GPSWeek = 0;
  this->GPSSec = 0;
  this->isAccurate = 0;
}

GPSInertial::GPSInertial(double posX, double posY, double posZ, double velX, double velY, double velZ, uint16 GPSWeek, float GPSSec, uint8 isAccurate) {
  this->posX = posX;
  this->posY = posY;
  this->posZ = posZ;
  this->velX = velX;
  this->velY = velY;
  this->velZ = velZ;
  this->GPSWeek = GPSWeek;
  this->GPSSec = GPSSec;
  this->isAccurate = isAccurate;
}

void GPSInertial::serialize(void) {
  this->serialize_double(this->posX);
  this->serialize_double(this->posY);
  this->serialize_double(this->posZ);
  this->serialize_double(this->velX);
  this->serialize_double(this->velY);
  this->serialize_double(this->velZ);
  this->serialize_uint16(this->GPSWeek);
  this->serialize_float(this->GPSSec);
  this->serialize_uint8(this->isAccurate);
}

void GPSInertial::deserialize(void) {
  this->posX = this->deserialize_double();
  this->posY = this->deserialize_double();
  this->posZ = this->deserialize_double();
  this->velX = this->deserialize_double();
  this->velY = this->deserialize_double();
  this->velZ = this->deserialize_double();
  this->GPSWeek = this->deserialize_uint16();
  this->GPSSec = this->deserialize_float();
  this->isAccurate = this->deserialize_uint8();
}

ACSmrp::ACSmrp() { 
  this->mrpX = 0;
  this->mrpY = 0;
  this->mrpZ = 0;
}

ACSmrp::ACSmrp(float mrpX, float mrpY, float mrpZ) {
  this->mrpX = mrpX;
  this->mrpY = mrpY;
  this->mrpZ = mrpZ;
}

void ACSmrp::serialize(void) {
  this->serialize_float(this->mrpX);
  this->serialize_float(this->mrpY);
  this->serialize_float(this->mrpZ);
}

void ACSmrp::deserialize(void) {
  this->mrpX = this->deserialize_float();
  this->mrpY = this->deserialize_float();
  this->mrpZ = this->deserialize_float();
}

CDHConfig::CDHConfig() { 
  this->testConfig = 0;
}

CDHConfig::CDHConfig(int32 testConfig) {
  this->testConfig = testConfig;
}

void CDHConfig::serialize(void) {
  this->serialize_int32(this->testConfig);
}

void CDHConfig::deserialize(void) {
  this->testConfig = this->deserialize_int32();
}

CMDConfig::CMDConfig() { 
  this->resetPeriod = 0;
  this->fileChunkSize = 0;
  this->maxDownlinkSize = 0;
  this->beaconPeriod = 0;
  this->comTimeout = 0;
  this->increasedBeaconPeriod = 0;
  this->expectedRebootDuration = 0;
}

CMDConfig::CMDConfig(int32 resetPeriod, int32 fileChunkSize, int32 maxDownlinkSize, int32 beaconPeriod, int32 comTimeout, int32 increasedBeaconPeriod, uint16 expectedRebootDuration) {
  this->resetPeriod = resetPeriod;
  this->fileChunkSize = fileChunkSize;
  this->maxDownlinkSize = maxDownlinkSize;
  this->beaconPeriod = beaconPeriod;
  this->comTimeout = comTimeout;
  this->increasedBeaconPeriod = increasedBeaconPeriod;
  this->expectedRebootDuration = expectedRebootDuration;
}

void CMDConfig::serialize(void) {
  this->serialize_int32(this->resetPeriod);
  this->serialize_int32(this->fileChunkSize);
  this->serialize_int32(this->maxDownlinkSize);
  this->serialize_int32(this->beaconPeriod);
  this->serialize_int32(this->comTimeout);
  this->serialize_int32(this->increasedBeaconPeriod);
  this->serialize_uint16(this->expectedRebootDuration);
}

void CMDConfig::deserialize(void) {
  this->resetPeriod = this->deserialize_int32();
  this->fileChunkSize = this->deserialize_int32();
  this->maxDownlinkSize = this->deserialize_int32();
  this->beaconPeriod = this->deserialize_int32();
  this->comTimeout = this->deserialize_int32();
  this->increasedBeaconPeriod = this->deserialize_int32();
  this->expectedRebootDuration = this->deserialize_uint16();
}

COMConfig::COMConfig() { 
  this->testConfig = 0;
}

COMConfig::COMConfig(int32 testConfig) {
  this->testConfig = testConfig;
}

void COMConfig::serialize(void) {
  this->serialize_int32(this->testConfig);
}

void COMConfig::deserialize(void) {
  this->testConfig = this->deserialize_int32();
}

EPSConfig::EPSConfig() { 
  this->minCOMCharge = 0;
  this->minPLDCharge = 0;
  this->minDSTCharge = 0;
}

EPSConfig::EPSConfig(uint16 minCOMCharge, uint16 minPLDCharge, uint16 minDSTCharge) {
  this->minCOMCharge = minCOMCharge;
  this->minPLDCharge = minPLDCharge;
  this->minDSTCharge = minDSTCharge;
}

void EPSConfig::serialize(void) {
  this->serialize_uint16(this->minCOMCharge);
  this->serialize_uint16(this->minPLDCharge);
  this->serialize_uint16(this->minDSTCharge);
}

void EPSConfig::deserialize(void) {
  this->minCOMCharge = this->deserialize_uint16();
  this->minPLDCharge = this->deserialize_uint16();
  this->minDSTCharge = this->deserialize_uint16();
}

FMGConfig::FMGConfig() { 
  this->testConfig = 0;
}

FMGConfig::FMGConfig(int32 testConfig) {
  this->testConfig = testConfig;
}

void FMGConfig::serialize(void) {
  this->serialize_int32(this->testConfig);
}

void FMGConfig::deserialize(void) {
  this->testConfig = this->deserialize_int32();
}

GPSConfig::GPSConfig() { 
  this->a = 0;
  this->e = 0;
  this->i = 0;
  this->Omega = 0;
  this->omega = 0;
  this->anom = 0;
  this->epochSeconds = 0;
}

GPSConfig::GPSConfig(float a, float e, float i, float Omega, float omega, float anom, float epochSeconds) {
  this->a = a;
  this->e = e;
  this->i = i;
  this->Omega = Omega;
  this->omega = omega;
  this->anom = anom;
  this->epochSeconds = epochSeconds;
}

void GPSConfig::serialize(void) {
  this->serialize_float(this->a);
  this->serialize_float(this->e);
  this->serialize_float(this->i);
  this->serialize_float(this->Omega);
  this->serialize_float(this->omega);
  this->serialize_float(this->anom);
  this->serialize_float(this->epochSeconds);
}

void GPSConfig::deserialize(void) {
  this->a = this->deserialize_float();
  this->e = this->deserialize_float();
  this->i = this->deserialize_float();
  this->Omega = this->deserialize_float();
  this->omega = this->deserialize_float();
  this->anom = this->deserialize_float();
  this->epochSeconds = this->deserialize_float();
}

PLDConfig::PLDConfig() { 
  this->chunkSize = 0;
}

PLDConfig::PLDConfig(int32 chunkSize) {
  this->chunkSize = chunkSize;
}

void PLDConfig::serialize(void) {
  this->serialize_int32(this->chunkSize);
}

void PLDConfig::deserialize(void) {
  this->chunkSize = this->deserialize_int32();
}

SCHItem::SCHItem() { 
  for (int iter = 0; iter < 2; iter++) {
    this->ecefPos[iter] = 0;
  }
  this->radius = 0;
  this->enter_mode = 0;
  this->timeout = 0;
  this->mode = 0;
  this->duration = 0;
}

SCHItem::SCHItem(double ecefPos[2], double radius, uint8 enter_mode, uint32 timeout, uint8 mode, int32 duration) {
  for (int iter = 0; iter < 2; iter++) {
    this->ecefPos[iter] = ecefPos[iter];
  }
  this->radius = radius;
  this->enter_mode = enter_mode;
  this->timeout = timeout;
  this->mode = mode;
  this->duration = duration;
}

void SCHItem::serialize(void) {
  for (int iter = 0; iter < 2; iter++) {
    this->serialize_double(this->ecefPos[iter]);
  }
  this->serialize_double(this->radius);
  this->serialize_uint8(this->enter_mode);
  this->serialize_uint32(this->timeout);
  this->serialize_uint8(this->mode);
  this->serialize_int32(this->duration);
}

void SCHItem::deserialize(void) {
  for (int iter = 0; iter < 2; iter++) {
    this->ecefPos[iter] = this->deserialize_double();
  }
  this->radius = this->deserialize_double();
  this->enter_mode = this->deserialize_uint8();
  this->timeout = this->deserialize_uint32();
  this->mode = this->deserialize_uint8();
  this->duration = this->deserialize_int32();
}

}
}

