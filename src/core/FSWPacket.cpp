//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Phoenix
//  @ File Name : FSWPacket.cpp
//  @ Date : 2/9/2010
//  @ Author :
//
//

#include "core/FSWPacket.h"
#include "util/crc.h"
#include <stdio.h>

//#include "boards/backplane/dbg_led.h"

using namespace std;

namespace Phoenix
{
    namespace Core
    {
        std::size_t FSWPacket::packetCounter = 0;

        FSWPacket::FSWPacket(void )
        {
            messagePtr = NULL;
            source = LOCATION_ID_INVALID;
            number = 0;
            opcode = 0; //Probably (maybe) needs to be changed [Adam]
            status = 0;
            destination = LOCATION_ID_INVALID;
            timestamp = 0;
        }

        FSWPacket::FSWPacket(LocationIDType sourceIn, LocationIDType destIn, uint16 numberIn, uint32 timestampIn, Message * messageIn)
        {
            source = sourceIn;
            destination = destIn;
            timestamp = timestampIn;
            opcode = 0; //Probably needs to be changed [Adam]
            status = 0;
            if (messageIn != NULL)
            {
                messagePtr = messageIn->Duplicate();
            }
            else
            {
                messagePtr = NULL;
                number = numberIn;
                return;
            }
			
            if (NULL == messagePtr)
            {
                source = LOCATION_ID_INVALID;
                destination = LOCATION_ID_INVALID;
                number = 0;
                return;
            }
			
            if(messagePtr->IsResponse())
            {
                number = numberIn;
            }
            else
            {
                number = packetCounter++;
            }
        }

        FSWPacket::FSWPacket(uint8 * buffer, std::size_t size)
        {
        	printf("size %d\n", size);
            // Check that the buffer is sized correctly.
            if (NULL == buffer || size < (sizeof(LocationIDType) + sizeof(LocationIDType) + sizeof(uint16) + sizeof(uint32)))
            {
                source = LOCATION_ID_INVALID;
                destination = LOCATION_ID_INVALID;
                messagePtr = NULL;
                printf("FSWPacket: Null packet\n");
                return;

            }

            // Get the source
            source = (LocationIDType)(((uint16)(buffer[0]) << 8) | buffer[1]);
            buffer += sizeof(uint16);
            size -= sizeof(uint16);
            destination = (LocationIDType)(((uint16)(buffer[0]) << 8) | buffer[1]);
            buffer += sizeof(uint16);
            size -= sizeof(uint16);
            number = (uint16)(((uint16)(buffer[0]) << 8) | buffer[1]);
            buffer += sizeof(uint16);
            size -= sizeof(uint16);
            timestamp = (uint32)(((uint32)(buffer[0]) << 24) | ((uint32)(buffer[1]) << 16) | ((uint32)(buffer[0]) << 8) | ((uint32)(buffer[3])));
            buffer += sizeof(uint32);
            size -= sizeof(uint32);

            /*
            status = buffer[0];
            buffer++;
            size++;
            opcode = buffer[0];
            buffer++;
            size++;

            uint16 length = ((uint16) buffer[0] << 8) | (uint16)buffer[1];
            buffer += sizeof(uint16);
            size -= sizeof(uint16);
            */



            messagePtr = Message::CreateMessage(buffer, size - 2);

            printf("Source %hu Dest %hu Num %hu Timestamp %x Response %2X Status %2X Type %2X Opcode %2X\n",
            		source, destination, number, timestamp, messagePtr->IsResponse(), messagePtr->GetSuccess(), messagePtr->GetType(), messagePtr->GetOpcode());

            // Check that the allocation worked correctly.
            if (NULL == messagePtr)
            {
            	printf("FSW Packet NULL message pointer\n");
                source = LOCATION_ID_INVALID;
                destination = LOCATION_ID_INVALID;
                return;
            }

            printf("Inside FSWPacket(): Message copied to string size %d %x\n",messagePtr->GetFlattenSize(),messagePtr);
			size -= messagePtr->GetFlattenSize();
			
			//fixme add crc in soon
			size += 2;

			if (size < 2)
			{
				printf("\r\nINVALID!! ");
				source = LOCATION_ID_INVALID;
				destination = LOCATION_ID_INVALID;
				delete messagePtr;
				messagePtr = NULL;
				return;
			}
        }

        FSWPacket::FSWPacket(const FSWPacket & packetSource)
        {
            if (NULL == packetSource.GetMessagePtr())
            {
                source = LOCATION_ID_INVALID;
                destination = LOCATION_ID_INVALID;
                number = 0;
                timestamp = 0;
                messagePtr = NULL;
                status = 0;
                opcode = 0; //Probably needs to be changed [Adam]
                return;
            }
            messagePtr = packetSource.GetMessagePtr()->Duplicate();

            if (NULL == messagePtr)
            {
                source = LOCATION_ID_INVALID;
                destination = LOCATION_ID_INVALID;
                number = 0;
                timestamp = 0;
                opcode = 0;
                status = 0; //Probably needs to be changed [Adam]
                return;
            }
			
            destination = packetSource.destination;
            source = packetSource.source;
            number = packetSource.number;
            timestamp = packetSource.timestamp;
        }

        FSWPacket::~FSWPacket(void )
        {
            delete messagePtr;
            //messagePtr = NULL;
        }

        FSWPacket & FSWPacket::operator=(const FSWPacket & source)
        {
            if (this == &source)
            {
                return *this;
            }

            SetSource(source.GetSource());
            SetDestination(source.GetDestination());
            SetNumber(source.GetNumber());
            SetTimestamp(source.GetTimestamp());
            if (NULL == source.GetMessagePtr())
            {
                messagePtr = NULL;
            }
            else
            {
                messagePtr = source.GetMessagePtr();
            }

            return *this;
        }


        LocationIDType FSWPacket::GetDestination(void) const
        {
            return destination;
        }

        LocationIDType FSWPacket::GetSource(void) const
        {
            return source;
        }

        uint16 FSWPacket::GetNumber(void) const
        {
            return number;
        }

        uint32 FSWPacket::GetTimestamp(void) const
        {
            return timestamp;
        }

        Message * FSWPacket::GetMessagePtr(void) const
        {
            return messagePtr;
        }

        std::size_t FSWPacket::GetPacketCounter(void) const
        {
            return packetCounter;
        }

        std::size_t FSWPacket::GetFlattenSize(void ) const
        {
            std::size_t messageSize;

            if (NULL == messagePtr)
            {
                messageSize = 0;
            }
            else
            {
                messageSize = messagePtr->GetFlattenSize();
            }

            return sizeof(source) + sizeof(destination) + sizeof(number) + sizeof(timestamp) + sizeof(opcode) + sizeof(status) + sizeof(uint16) + messageSize + sizeof(crc_t);
        }

        bool FSWPacket::operator==(const FSWPacket & check) const
		{
            if (messagePtr == NULL)
            {
                return false;
            }

            return ((source == check.source) &&
                    (destination == check.destination) &&
                    (number == check.number) &&
                    (timestamp == check.timestamp) &&
                    (*messagePtr == check.messagePtr));
		}

        void FSWPacket::SetSource(LocationIDType newSource)
        {
            source = newSource;
        }

        void FSWPacket::SetDestination(LocationIDType newDestination)
        {
            destination = newDestination;
        }

        void FSWPacket::SetNumber(uint16 newNumber)
        {
            number = newNumber;
        }

        void FSWPacket::SetTimestamp(uint32 newTimestamp)
        {
            timestamp = newTimestamp;
        }

        void FSWPacket::SetMessage(Message * newMessage)
        {
            delete messagePtr;
			if(newMessage == NULL)
			{
				messagePtr = NULL;
				return;
			}
            messagePtr = newMessage->Duplicate();
        }

        std::size_t FSWPacket::Flatten(uint8 * buffer, std::size_t size) const
        {
            size_t numCopied = 0, messageCopied = 0;
            uint8 * bufferStart = buffer;
            uint16 length;
            crc_t crc;

            // Check the buffer and buffer size.
            if (NULL == buffer || size < GetFlattenSize( ))
            {
                return 0;
            }

            // Copy the source, destination, number, messagePtr
            *(buffer++) = (source >> 8) & 0xFF;
            *(buffer++) = source & 0xFF;
            numCopied+=2;
            size-=2;

            *(buffer++) = (destination >> 8) & 0xFF;
            *(buffer++) = destination & 0xFF;
            numCopied+=2;
            size-=2;

            *(buffer++) = (number >> 8) & 0xFF;
            *(buffer++) = number & 0xFF;
            numCopied+=2;
            size-=2;

            *(buffer++) = (timestamp >> 24) & 0xFF;
            *(buffer++) = (timestamp >> 16) & 0xFF;
            *(buffer++) = (timestamp >> 8)  & 0xFF;
            *(buffer++) = timestamp & 0xFF;
            numCopied+=4;
            size-=4;

            *(buffer++) = status & 0xFF;
            *(buffer++) = opcode & 0xFF;
            numCopied+=2;
            size-=2;

            if(messagePtr){
            	length = messagePtr->GetFlattenSize();
            	*(buffer++) = (length >> 8) & 0xFF;
            	*(buffer++) = length & 0xFF;
            	numCopied += sizeof(uint16);
            	messageCopied += messagePtr->Flatten(buffer, size);
				numCopied += messageCopied;
				buffer += messageCopied;
            }else{
            	*(buffer++) = 0x00;
            	*(buffer++) = 0x00;
            	numCopied += sizeof(uint16);
            }


           crc = crcSlow(bufferStart, numCopied);
           for (size_t i = 0; i < sizeof(crc); ++i)
           {
               *(buffer++) = (crc >> (8*(sizeof(crc)-i-1))) & 0xff;
           }
            numCopied += sizeof(crc);

            return numCopied;
		}
    }
}
