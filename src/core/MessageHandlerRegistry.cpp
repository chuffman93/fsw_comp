//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : AllStar
//  @ File Name : MessageHandlerRegistry.cpp
//  @ Date : 2/9/2010
//  @ Author : 
//
//


#include "core/MessageHandlerRegistry.h"
#include "core/ReturnMessage.h"
#include "core/ErrorMessage.h"
#include <cstdio>

//#include "boards/backplane/dbg_led.h"

using namespace AllStar::Servers;

namespace AllStar
{
    namespace Core
    {
        MessageHandlerRegistry::MessageHandlerRegistry(void )
        {

        }
        
        MessageHandlerRegistry::MessageHandlerRegistry(const MessageHandlerRegistry & source)
        {

        }
        
        MessageHandlerRegistry::~MessageHandlerRegistry(void )
        {
        
        }
        
        MessageHandlerRegistry & MessageHandlerRegistry::operator=(const MessageHandlerRegistry source)
        {
        	return *this;
        }
		
        bool MessageHandlerRegistry::RegisterHandler(const MessageIdentifierType & key, MessageHandler * handler)
        {
        	handlerMap.insert(make_pair(key, handler));
        	return true;
        }

        FSWPacket * MessageHandlerRegistry::Invoke(const FSWPacket & packet)
        {
        	//Message * msg = packet.GetMessagePtr();
        	std::map<MessageIdentifierType, MessageHandler*>::iterator it =
        			handlerMap.find(MessageIdentifierType(packet.GetType(), packet.GetOpcode()));

        	if (it == handlerMap.end() || it->second == NULL)
        	{
        		FSWPacket * ret = new FSWPacket(ERROR_OPCODE_UNRECOGNIZED_TYPE, false, true, MESSAGE_TYPE_ERROR);
				return ret;
        	}
        	else
        	{
        		return it->second->Handle(packet);
        	}
        }
        
    }
}
