/*******************************************************
 *
 * THIS FILE IS AUTO-GENERATED, DO NOT EDIT THIS FILE!
 * To edit this file, edit /TLM/struct.txt, then
 * execute /TLM/struct_autocoder/autocode.sh
 *
 ******************************************************/

#ifndef Structs_H_
#define Structs_H_

#include "util/serialize.h"
#include "core/StdTypes.h"

namespace AllStar{
namespace Servers{

class BeaconStruct : public Serialize {
public:
  const static int size = 81;
  BeaconStruct();
  BeaconStruct(int32 GPSWeek, float GPSSec, double xPosition, double yPosition, double zPosition, double xVelocity, double yVelocity, double zVelocity, uint8 systemMode, uint8 subpowerStates, int16 epochNumber, uint16 radNumber, uint32 spiSent, uint32 spiDropped, uint16 batteryCap, int8 acsMode, float memory, float cpu15);
  int32 GPSWeek; 
  float GPSSec; 
  double xPosition; 
  double yPosition; 
  double zPosition; 
  double xVelocity; 
  double yVelocity; 
  double zVelocity; 
  uint8 systemMode; 
  uint8 subpowerStates; 
  int16 epochNumber; 
  uint16 radNumber; 
  uint32 spiSent; 
  uint32 spiDropped; 
  uint16 batteryCap; 
  int8 acsMode; 
  float memory; 
  float cpu15; 
  void serialize(void);
  void deserialize(void);
};

class CDHStatus : public Serialize {
public:
  const static int size = 404;
  CDHStatus();
  CDHStatus(int32 time, float cpu1, float cpu5, float cpu15, float memory, float hotswaps[32], float tempSensors[64]);
  int32 time; // log the time the stats were taken
  float cpu1; // 1  minute loads (% of CPU)
  float cpu5; // 5  minute loads (% of CPU)
  float cpu15; // 15 minute loads (% of CPU)
  float memory; // % of memory
  float hotswaps[32]; 
  float tempSensors[64]; 
  void serialize(void);
  void deserialize(void);
};

class ACSStatus : public Serialize {
public:
  const static int size = 97;
  ACSStatus();
  ACSStatus(float mag_x, float mag_y, float mag_z, float curr_mrp_x, float curr_mrp_y, float curr_mrp_z, float targ_mrp_x, float targ_mrp_y, float targ_mrp_z, float rwspeed_x, float rwspeed_y, float rwspeed_z, float angrate_x, float angrate_y, float angrate_z, float gyro_x, float gyro_y, float gyro_z, float rw_pwm_x, float rw_pwm_y, float rw_pwm_z, float tr_x, float tr_y, float tr_z, int8 mode);
  float mag_x; 
  float mag_y; 
  float mag_z; 
  float curr_mrp_x; 
  float curr_mrp_y; 
  float curr_mrp_z; 
  float targ_mrp_x; 
  float targ_mrp_y; 
  float targ_mrp_z; 
  float rwspeed_x; 
  float rwspeed_y; 
  float rwspeed_z; 
  float angrate_x; 
  float angrate_y; 
  float angrate_z; 
  float gyro_x; 
  float gyro_y; 
  float gyro_z; 
  float rw_pwm_x; 
  float rw_pwm_y; 
  float rw_pwm_z; 
  float tr_x; 
  float tr_y; 
  float tr_z; 
  int8 mode; 
  void serialize(void);
  void deserialize(void);
};

class PLDStatus : public Serialize {
public:
  const static int size = 16;
  PLDStatus();
  PLDStatus(uint8 powerFault, uint16 motorSpeed, uint8 thermistors[10], uint8 adcDataWorking, uint16 control);
  uint8 powerFault; 
  uint16 motorSpeed; 
  uint8 thermistors[10]; 
  uint8 adcDataWorking; 
  uint16 control; 
  void serialize(void);
  void deserialize(void);
};

class EPSStatus : public Serialize {
public:
  const static int size = 36;
  EPSStatus();
  EPSStatus(uint16 current3v3, uint16 voltage3v3, uint16 currentVbat, uint16 voltageVbat, uint16 current12v, uint16 voltage12v, uint16 remainingCapacity, uint16 battCurrent, uint16 battVoltage, uint16 battStatus, uint16 frangCurrent, uint16 frangVoltage, uint16 convCurrentX, uint16 convThreshX, uint16 convCurrentY, uint16 convThreshY, uint16 convCurrentW, uint16 convThreshW);
  uint16 current3v3; 
  uint16 voltage3v3; 
  uint16 currentVbat; 
  uint16 voltageVbat; 
  uint16 current12v; 
  uint16 voltage12v; 
  uint16 remainingCapacity; 
  uint16 battCurrent; 
  uint16 battVoltage; 
  uint16 battStatus; 
  uint16 frangCurrent; 
  uint16 frangVoltage; 
  uint16 convCurrentX; 
  uint16 convThreshX; 
  uint16 convCurrentY; 
  uint16 convThreshY; 
  uint16 convCurrentW; 
  uint16 convThreshW; 
  void serialize(void);
  void deserialize(void);
};

class ACSConfig : public Serialize {
public:
  const static int size = 4;
  ACSConfig();
  ACSConfig(int32 testConfig);
  int32 testConfig; 
  void serialize(void);
  void deserialize(void);
};

class CDHConfig : public Serialize {
public:
  const static int size = 4;
  CDHConfig();
  CDHConfig(int32 testConfig);
  int32 testConfig; 
  void serialize(void);
  void deserialize(void);
};

class CMDConfig : public Serialize {
public:
  const static int size = 20;
  CMDConfig();
  CMDConfig(int32 resetPeriod, int32 fileChunkSize, int32 maxDownlinkSize, int32 beaconPeriod, int32 increasedBeaconPeriod);
  int32 resetPeriod; // seconds
  int32 fileChunkSize; 
  int32 maxDownlinkSize; 
  int32 beaconPeriod; 
  int32 increasedBeaconPeriod; 
  void serialize(void);
  void deserialize(void);
};

class COMConfig : public Serialize {
public:
  const static int size = 4;
  COMConfig();
  COMConfig(int32 testConfig);
  int32 testConfig; 
  void serialize(void);
  void deserialize(void);
};

class EPSConfig : public Serialize {
public:
  const static int size = 6;
  EPSConfig();
  EPSConfig(uint16 minCOMCharge, uint16 minPLDCharge, uint16 minDSTCharge);
  uint16 minCOMCharge; 
  uint16 minPLDCharge; 
  uint16 minDSTCharge; 
  void serialize(void);
  void deserialize(void);
};

class FMGConfig : public Serialize {
public:
  const static int size = 4;
  FMGConfig();
  FMGConfig(int32 testConfig);
  int32 testConfig; 
  void serialize(void);
  void deserialize(void);
};

class PLDConfig : public Serialize {
public:
  const static int size = 4;
  PLDConfig();
  PLDConfig(int32 chunkSize);
  int32 chunkSize; 
  void serialize(void);
  void deserialize(void);
};

class SCHItem : public Serialize {
public:
  const static int size = 34;
  SCHItem();
  SCHItem(double latitude, double longitude, double radius, uint8 enter_mode, int32 timeout, uint8 mode, int32 duration);
  double latitude; 
  double longitude; 
  double radius; 
  uint8 enter_mode; 
  int32 timeout; 
  uint8 mode; 
  int32 duration; 
  void serialize(void);
  void deserialize(void);
};

}
}

#endif
